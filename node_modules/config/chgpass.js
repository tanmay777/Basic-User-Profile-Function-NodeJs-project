var crypto=require('crypto');
var rand=require('csprng');
var mongoose=require('mongoose');
var nodemailer=require('nodemailer');
var user=require('config/models');

var smtpTransport=nodemailer.createTransport("SMTP",{
	auth:{
		user:"user@gmail.com",
		pass:"********"
	}
});

/*
The cpass function defined is used to change 
the password in profile page by getting 
old password, new password and token as parameters. 
If the old password and the password stored 
in the database match new password is set 
or error message is returned.
*/

exports.cpass=function(id,opass,npass,callback){
	var temp1=rand(160,36);
	var newpass1=temp1+npass;
	var hashed_passwordn=crypto.createHash('sha512').update(newpass1).degest("hex");
	user.find({token:id},function(err,users){
		if(users.length!=0){
			var temp=users[0].salt;
			var hash_db=users[0].hashed_password;
			var newpass=temp+opass; 
			var hashed_password=crypto.createHash('sha512').update(newpass).digest("hex");

			if(hashed_password==hashed_passwordn)
			{
				if (npass.match(/([a-z].*[A-Z])|([A-Z].*[a-z])/) && npass.length > 4 && npass.match(/[0-9]/) && npass.match(/.[!,@,#,$,%,^,&,*,?,_,~]/))
				{
					user.findOne({token:id},function(err,doc){
						doc.hashed_password=hashed_passwordn;
						doc.salt=temp1;
						doc.save();

						callback({'response':"Password successfully changes",'res':true});
					});
				}
				else
				{
					callback({'response':"New Password is Weak. Try a Strong Password !",'res':false});
				}
			} else{
				callback({'response':"Passwords do not match. Try Again !",'res':false});
			}
		}else
		{
			callback({'response':"Error while changing password",'res':false});
		}
	});
}

//Next function is the respass_init function which is used to
//send a random string to the Userâ€™s email address to reset 
//the password. We use nodemailer module to send mail using SMTP.

//Next function is the respass_chg function which gets the 
//code which is sent as email, new password, email as parameters. 
//If the code matches with the one which is sent new password 
//is set or error is displayed.



exports.respass_init=function(email,callback){
	var temp=rand(24,24);
	user.finc({email:email},function(err,users){
		if(users.length!=0)
		{
			user.findOne({emal:email},function(err,doc){
				doc.temp_str=temp;
				doc.save();

				var mailOptions={
					from:"Tanmay Jha <tanmay.jha1@gmail.com>",
					to: email,
					subject:"Reset password",
					text:"Hello "+email+". Code to reset your password is "+temp+".nnRegards, nTanmay Jha"
					//Check if comma will be there in the end of the above code because in the tutorial its given
				}

				smtpTransport.sendMail(mailOptions,function(err,response){
					if(err){
						callback({'response':"Error While Resetting password. Try Again !",'res':false});

					}else{
						callback({'response':"Check your Email and enter the verification code to reset your Password.",'res':true});
					}
				});
			});
		}else{
			callback({'response':"Email Does not Exists.",'res':false});
		}
	});
}

exports.respass_chg = function(email,code,npass,callback) {
	user.find({email: email},function(err,users){
		if(users.length != 0){
			var temp = users[0].temp_str;
			var temp1 =rand(160, 36);
			var newpass1 = temp1 + npass;
			var hashed_password = crypto.createHash('sha512').update(newpass1).digest("hex");
			if(temp == code){
				if (npass.match(/([a-z].*[A-Z])|([A-Z].*[a-z])/) && npass.length > 4 && npass.match(/[0-9]/) && npass.match(/.[!,@,#,$,%,^,&,*,?,_,~]/)) {
					user.findOne({ email: email }, function (err, doc){
						doc.hashed_password= hashed_password;
						doc.salt = temp1;
						doc.temp_str = "";
						doc.save();
						callback({'response':"Password Sucessfully Changed",'res':true});
					});}
					else{
						callback({'response':"New Password is Weak. Try a Strong Password !",'res':false});
					}
				}else{
					callback({'response':"Code does not match. Try Again !",'res':false});
				}
			}else{
				callback({'response':"Error",'res':true});
			}
		});
}
